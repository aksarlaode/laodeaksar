/* eslint-disable @typescript-eslint/no-floating-promises */
import React from "react";
import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { UserButton, useClerk, useUser } from "@clerk/nextjs";
import { useForm } from "@mantine/form";

//import { useForm } from "react-hook-form";

import { Button, H1, H2, Input, Label, P, Textarea } from "@aksar/ui";

import { api, type RouterInputs, type RouterOutputs } from "~/utils/api";

const PostCard: React.FC<{
  post: RouterOutputs["post"]["all"][number];
  onPostDelete?: () => void;
}> = ({ post, onPostDelete }) => {
  return (
    <div className="flex flex-row rounded-lg bg-white/10 p-4 transition-all hover:scale-[101%]">
      <div className="flex-grow">
        <H2>{post.title}</H2>
        <P>{post.content}</P>
      </div>
      <div>
        <span
          className="cursor-pointer text-sm font-bold uppercase text-pink-400"
          onClick={onPostDelete}
        >
          Delete
        </span>
      </div>
    </div>
  );
};

const CreatePostForm: React.FC = () => {
  const utils = api.useContext();
  const router = useRouter();

  const { mutateAsync, error } = api.post.create.useMutation({
    async onSuccess() {
      await utils.invalidate();
    },
  });

  const { getInputProps, onSubmit } = useForm({
    initialValues: { title: "", content: "" },
  });
  const handleSubmit = (formData: RouterInputs["post"]["create"]) => {
    mutateAsync(formData).then(() => {
      router.push("/");
    });
  };

  return (
    <form
      className="flex w-full max-w-2xl flex-col gap-2 p-4"
      onSubmit={onSubmit(handleSubmit)}
    >
      <div>
        <Label htmlFor="title">Title</Label>
        <Input
          id="title"
          type="text"
          placeholder="Title"
          {...getInputProps("title")}
        />
        {error?.data?.zodError?.fieldErrors.title && (
          <span className="mb-2 text-red-500">
            {error.data.zodError.fieldErrors.title}
          </span>
        )}
      </div>
      <div>
        <Label htmlFor="content">Content</Label>
        <Textarea
          id="content"
          placeholder="Content"
          {...getInputProps("content")}
        />
        {error?.data?.zodError?.fieldErrors.content && (
          <span className="mb-2 text-red-500">
            {error.data.zodError.fieldErrors.content}
          </span>
        )}
      </div>
      <Button variant="outline" type="submit">
        Submit
      </Button>
    </form>
  );
};

const Home: NextPage = () => {
  const postQuery = api.post.all.useQuery();

  const deletePostMutation = api.post.delete.useMutation({
    onSettled: () => postQuery.refetch(),
  });

  const { user } = useUser();

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container mt-12 flex flex-col items-center justify-center gap-4 px-4 py-8">
        <H1>
          Create <span className="text-pink-400">T3</span> Turbo
        </H1>
        <AuthShowcase />

        {user && <CreatePostForm />}

        {postQuery.data ? (
          <div className="w-full max-w-2xl">
            {postQuery.data?.length === 0 ? (
              <span>There are no posts!</span>
            ) : (
              <div className="flex h-[40vh] justify-center overflow-y-scroll px-4 text-2xl">
                <div className="flex w-full flex-col gap-4">
                  {postQuery.data?.map((p) => {
                    return (
                      <PostCard
                        key={p.id}
                        post={p}
                        onPostDelete={() => deletePostMutation.mutate(p.id)}
                      />
                    );
                  })}
                </div>
              </div>
            )}
          </div>
        ) : (
          <P>Loading...</P>
        )}
      </div>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { openSignIn } = useClerk();
  const { user } = useUser();

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      {user && (
        <P className="text-center text-2xl">
          <span>Logged in as {user.fullName}</span>
          <UserButton />
        </P>
      )}
      {!user && <Button onClick={() => openSignIn()}>Sign In</Button>}
    </div>
  );
};
